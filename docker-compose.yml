
services:
  client_app:
    image: node:18-alpine # ใช้ภาพ Node.js เวอร์ชัน 18
    ports:
      - '8080:8080'
    environment:
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
      MY_PORT: 3000
      NODE_ENV: development
    working_dir: /app # กำหนด Working Directory
    volumes:
      - ./client:/app # แชร์โค้ดจาก Host
      - /app/node_modules # เก็บ node_modules
    command: sh -c "npm install && npm run dev"

  server_app:
    image: node:18-alpine # ใช้ภาพ Node.js เวอร์ชัน 18
    ports:
      - '3000:3000'
    environment:
      DATABASE_URL: mysql://root:111111@mysql:3306/mydb_room"
    working_dir: /app # กำหนด Working Directory
    volumes:
      - ./server:/app # แชร์โค้ดจาก Host
      - /app/node_modules # เก็บ node_modules
      
    command: sh -c "
      until nc -z mysql 3306; do
      echo 'Waiting for MySQL...';
      sleep 2;
      done;
      sleep 10;
      npx prisma generate &&
      npx prisma db push &&
      npm run start:dev --prefix server"
    depends_on:
      - mysql

  mysql:
    image: mysql:8.0 # ใช้ภาพ MySQL เวอร์ชัน 8
    restart: always
    ports:
      - '33306:3306'
    volumes:
      - './db_mysql/mysql:/var/lib/mysql' # แชร์โฟลเดอร์สำหรับเก็บข้อมูล
    environment:
      MYSQL_ROOT_PASSWORD: '111111' # รหัสผ่าน Root
      MYSQL_DATABASE: 'mydb_room' # สร้างฐานข้อมูลอัตโนมัติ
    command: mysqld --sql_mode="" # ปิด SQL_MODE เพื่อเพิ่มความยืดหยุ่น

  pma:
    image: phpmyadmin:latest # ใช้ภาพ phpMyAdmin ล่าสุด
    restart: always
    ports:
      - '43306:80'
    environment:
      PMA_ARBITRARY: 1

  mongo:
    image: mongo:6.0 # ใช้ภาพ MongoDB เวอร์ชัน 6
    environment:
      MONGO_INITDB_ROOT_USERNAME: keng # ตั้งค่าผู้ใช้ Root
      MONGO_INITDB_ROOT_PASSWORD: mypassword # ตั้งค่ารหัสผ่าน Root
    volumes:
      - './db_mongo/mongo:/var/lib/mongo' # แชร์โฟลเดอร์สำหรับเก็บข้อมูล

  redis:
    image: redis:7.0 # ใช้ภาพ Redis เวอร์ชัน 7
    restart: always





















# services:
#   client_app:
#     build:
#       context: ./client
#       dockerfile: Dockerfile
#     ports:
#       - '8080:8080'
#     environment:
#       # NEXT_PUBLIC_API_URL: http://localhost:3001/api
#       CHOKIDAR_USEPOLLING: true
#       WATCHPACK_POLLING: true
#       MY_PORT: 3000
#       NODE_ENV: development
#     volumes:
#       - ./client:/app
#       - /app/node_modules
#     command: sh -c "npm install && npm run dev"

#   server_app:
#     build:
#       context: ./server
#       dockerfile: Dockerfile
#     ports:
#       - '3000:3000'
#     # environment:
#     #   - DATABASE_URL=mysql://root:111111@localhost:33306/mydb_room
#     volumes:
#       - ./server:/app
#       - /app/node_modules
#       # เพิ่ม volumes สำหรับ hot reload
#       - ./server/src:/app/src
#       - ./server/test:/app/test
#       - ./src:/usr/src/app/src
#       - ./node_modules:/usr/src/app/node_modules # แชร์ node_modules จาก Host
#       - ./prisma:/usr/src/app/prisma # ถ้ามี schema.prisma
#     command: sh -c "
#       until nc -z mysql 3306; do
#       echo 'Waiting for MySQL...';
#       sleep 2;
#       done;
#       sleep 10;
#       npx prisma generate &&
#       npx prisma db push &&
#       npm run start:dev"
#     depends_on:
#       - mysql

#   mysql:
#     image: mysql
#     restart: always
#     ports:
#       - '33306:3306'
#     volumes:
#       - './db_mysql/mysql/:/var/lib/mysql'
#     environment:
#       MYSQL_ROOT_PASSWORD: '111111'
#       # MYSQL_DATABASE: 'mydb_room'  # เพิ่มบรรทัดนี้เพื่อสร้างฐานข้อมูลอัตโนมัติ
#     command: mysqld --sql_mode=""

#   pma:
#     image: phpmyadmin
#     restart: always
#     ports:
#       - 43306:80
#     environment:
#       - PMA_ARBITRARY=1
#   mongo:
#     image: mongo
#     environment:
#       - MONGO_INITDB_ROOT_USERNAME=keng
#       - MONGO_INITDB_ROOT_PASSWORD=mypassword
#     volumes:
#       - './db_mongo/mongo/:/var/lib/mongo'

#   redis:
#     image: redis
